name: Build Artifacts

on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build [${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}]
    runs-on: ${{ matrix.config.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - output: rift-pjrt-sys-linux-amd64-cpu.tar.gz
            os: linux
            architecture: amd64
            device: cpu
            config: "--config=linux"
            artifact: librift-pjrt-sys.so
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/disk=large/spot=false
          - output: rift-pjrt-sys-linux-amd64-cuda.tar.gz
            os: linux
            architecture: amd64
            device: cuda
            config: "--config=linux --config=cuda"
            artifact: librift-pjrt-sys.so
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/image=ubuntu22-gpu-x64/disk=large/tag=ubuntu22-cuda-x64/spot=false
          - output: rift-pjrt-sys-linux-amd64-rocm.tar.gz
            os: linux
            architecture: amd64
            device: rocm
            config: "--config=linux --config=rocm"
            artifact: librift-pjrt-sys.so
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/image=ubuntu22-gpu-x64/disk=large/tag=ubuntu22-rocm-x64/spot=false
          - output: rift-pjrt-sys-darwin-arm64-cpu.tar.gz
            os: darwin
            architecture: arm64
            device: cpu
            config: "--config=macos"
            artifact: librift-pjrt-sys.dylib
            runner: macos-15
          - output: rift-pjrt-sys-windows-amd64-cpu.tar.gz
            os: windows
            architecture: amd64
            device: cpu
            config: "--config=windows"
            artifact: rift-pjrt-sys.dll
            runner: runs-on=${{ github.run_id }}/image=windows22-base-x64/family=c7i-flex.8xlarge/disk=large/spot=false
    outputs:
      xla_commit_id: ${{ steps.extract_xla_commit_id.outputs.xla_commit_id }}
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: "xla-artifacts"
      - name: Install Chocolatey, Git, Visual Studio 2019 Build Tools, and LLVM 18
        if: ${{ matrix.config.os == 'windows' }}
        run: |
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # Install Git
          choco install git.install -y
          echo "C:\Program Files\Git\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Install Visual Studio 2019 Build Tools
          choco install visualstudio2019buildtools -y
          choco install visualstudio2019-workload-vctools -y
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Install LLVM 18
          choco install llvm --version 18.1.8 -y
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Python
        uses: actions/setup-python@v5
        if: ${{ matrix.config.os == 'windows' }}
        with:
          python-version: "3.11.9"
      - name: Install ROCm
        if: ${{ matrix.config.device == 'rocm' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" -- 18
          sudo apt update -y
          sudo apt install llvm-18 lld-18 clang-18 libnuma-dev -y
          wget https://repo.radeon.com/amdgpu-install/6.4.1/ubuntu/jammy/amdgpu-install_6.4.60401-1_all.deb
          sudo apt install ./amdgpu-install_6.4.60401-1_all.deb -y --allow-downgrades
          sudo amdgpu-install --usecase=hiplibsdk --no-dkms -y
      - name: Install Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.26.0
          # bazelisk-cache: true
          # disk-cache: ${{ github.workflow }}
          # repository-cache: true
      - name: Extract XLA Commit ID
        id: extract_xla_commit_id
        shell: bash
        run: |
          XLA_COMMIT_ID=$(grep 'XLA_COMMIT = "' xla-artifacts/WORKSPACE | sed 's/.*XLA_COMMIT = "\([^"]*\)".*/\1/')
          echo "Extracted XLA Commit ID: $XLA_COMMIT_ID"
          echo "xla_commit_id=$XLA_COMMIT_ID" >> "$GITHUB_OUTPUT"
      - name: Build Library
        working-directory: ./xla-artifacts
        id: build_library
        shell: bash
        run: |
          OUTPUT=${{ matrix.config.output }}
          bazel build ${{ matrix.config.config }} //:rift-pjrt-sys-archive
          cp bazel-bin/rift-pjrt-sys-archive.tar.gz $OUTPUT
          echo "library=$OUTPUT" >> $GITHUB_OUTPUT
          if [[ ${{ matrix.config.device != 'rocm' }} ]]; then
            OUTPUT_STATIC=$(echo '${{ matrix.config.output }}' | sed 's/-sys/-sys-static/')
            bazel build ${{ matrix.config.config }} //:rift-pjrt-sys-static-archive
            cp bazel-bin/rift-pjrt-sys-static-archive.tar.gz $OUTPUT_STATIC
            echo "static_library=$OUTPUT_STATIC" >> $GITHUB_OUTPUT
          fi
      - name: Upload '${{ steps.build_library.outputs.library }}'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_library.outputs.library }}
          path: xla-artifacts/${{ steps.build_library.outputs.library }}
      - name: Upload '${{ steps.build_library.outputs.static_library }}'
        if: ${{ matrix.config.device != 'rocm' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_library.outputs.static_library }}
          path: xla-artifacts/${{ steps.build_library.outputs.static_library }}

  release:
    name: Release Artifacts
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: xla-${{ needs.build.outputs.xla_commit_id }}
          files: "*.tar.gz/*.tar.gz"
