name: Build Artifacts

on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build [${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}]
    runs-on: ${{ matrix.config.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: linux
            architecture: amd64
            device: cpu
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/image=ubuntu22-gpu-x64/disk=large/tag=ubuntu22-cuda-x64/spot=false
          - os: linux
            architecture: amd64
            device: cuda
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/image=ubuntu22-gpu-x64/disk=large/tag=ubuntu22-cuda-x64/spot=false
          - os: linux
            architecture: amd64
            device: rocm
            runner: runs-on=${{ github.run_id }}/runner=32cpu-linux-x64/image=ubuntu22-gpu-x64/disk=large/tag=ubuntu22-cuda-x64/spot=false
          - os: macos
            architecture: arm64
            device: cpu
            runner: macos-15
          - os: windows
            architecture: amd64
            device: cpu
            runner: runs-on=${{ github.run_id }}/image=windows22-base-x64/family=c7i-flex.8xlarge/disk=large/spot=false
    outputs:
      xla_commit_id: ${{ steps.extract_xla_commit_id.outputs.xla_commit_id }}
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: "xla-artifacts"
      - name: Install Chocolatey, Git, Visual Studio 2019 Build Tools, and LLVM 18
        if: ${{ matrix.config.os == 'windows' }}
        run: |
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # Install Git
          choco install git.install -y
          echo "C:\Program Files\Git\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Install Visual Studio 2019 Build Tools
          choco install visualstudio2019buildtools -y
          choco install visualstudio2019-workload-vctools -y
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Install LLVM 18
          choco install llvm --version 18.1.8 -y
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install LLVM 18 & NUMA
        if: ${{ matrix.config.os == 'linux' && matrix.config.device == 'rocm' }}
        run: |
          sudo apt purge llvm* clang* lld* libc++* -y
          sudo apt autoremove -y
          wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- 18
          sudo apt-get install libnuma-dev -y
      - name: Install Python
        uses: actions/setup-python@v5
        if: ${{ matrix.config.os == 'windows' }}
        with:
          python-version: "3.11.9"
      - name: Install Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.26.0
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Extract XLA Commit ID
        id: extract_xla_commit_id
        shell: bash
        run: |
          XLA_COMMIT_ID=$(grep 'XLA_COMMIT = "' xla-artifacts/WORKSPACE | sed 's/.*XLA_COMMIT = "\([^"]*\)".*/\1/')
          echo "Extracted XLA Commit ID: $XLA_COMMIT_ID"
          echo "xla_commit_id=$XLA_COMMIT_ID" >> "$GITHUB_OUTPUT"
      - name: Build `ryft-xla-sys` Dynamic Library
        working-directory: ./xla-artifacts
        id: build_ryft_xla_sys_dynamic_library
        shell: bash
        run: |
          OUTPUT=ryft-xla-sys-${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}.tar.gz
          bazel build --config=${{ matrix.config.os }} ${{ matrix.config.device == 'cuda' && '--config=cuda' || '' }} ${{ matrix.config.device == 'rocm' && '--config=rocm' || '' }} //:ryft-xla-sys-archive
          cp bazel-bin/ryft-xla-sys-archive.tar.gz $OUTPUT
          echo "library=$OUTPUT" >> $GITHUB_OUTPUT
      - name: Build `ryft-xla-sys` Static Library
        if: ${{ matrix.config.device != 'rocm' }} # TODO(eaplatanios): Figure out how to build a static library for ROCm.
        working-directory: ./xla-artifacts
        id: build_ryft_xla_sys_static_library
        shell: bash
        run: |
          OUTPUT=ryft-xla-sys-static-${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}.tar.gz
          bazel build --config=${{ matrix.config.os }} ${{ matrix.config.device == 'cuda' && '--config=cuda' || '' }} ${{ matrix.config.device == 'rocm' && '--config=rocm' || '' }} //:ryft-xla-sys-static-archive
          cp bazel-bin/ryft-xla-sys-static-archive.tar.gz $OUTPUT
          echo "library=$OUTPUT" >> $GITHUB_OUTPUT
      - name: Build PJRT Plugin
        if: ${{ matrix.config.device != 'cpu' }}
        working-directory: ./xla-artifacts
        id: build_pjrt_plugin
        shell: bash
        run: |
          LIB_PREFIX="${{ matrix.config.os != 'windows' && 'lib' || '' }}"
          LIB_SUFFIX="${{ matrix.config.os == 'linux' && '.so' || '' }}${{ matrix.config.os == 'macos' && '.dylib' || '' }}${{ matrix.config.os == 'windows' && '.dll' || '' }}"
          OUTPUT="${LIB_PREFIX}pjrt-plugin-${{ matrix.config.device }}${LIB_SUFFIX}"
          bazel build --config=${{ matrix.config.os }} ${{ matrix.config.device == 'cuda' && '--config=cuda' || '' }} ${{ matrix.config.device == 'rocm' && '--config=rocm' || '' }} //:pjrt-gpu-plugin
          cp bazel-bin/libpjrt-gpu-plugin.so $OUTPUT
          echo "library=$OUTPUT" >> $GITHUB_OUTPUT
      - name: Create PJRT Plugin Archive
        if: ${{ matrix.config.device != 'cpu' }}
        uses: a7ul/tar-action@v1.2.0
        with:
          command: c
          cwd: ./
          files: xla-artifacts/${{ steps.build_pjrt_plugin.outputs.library }}
          outPath: pjrt-plugin-${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}.tar.gz
      - name: Upload `ryft-xla-sys` Dynamic Library
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_ryft_xla_sys_dynamic_library.outputs.library }}
          path: xla-artifacts/${{ steps.build_ryft_xla_sys_dynamic_library.outputs.library }}
      - name: Upload `ryft-xla-sys` Static Library
        if: ${{ matrix.config.device != 'rocm' }} # TODO(eaplatanios): Figure out how to build a static library for ROCm.
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_ryft_xla_sys_static_library.outputs.library }}
          path: xla-artifacts/${{ steps.build_ryft_xla_sys_static_library.outputs.library }}
      - name: Upload PJRT Plugin
        if: ${{ matrix.config.device != 'cpu' }}
        uses: actions/upload-artifact@v4
        with:
          name: pjrt-plugin-${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}.tar.gz
          path: pjrt-plugin-${{ matrix.config.os }}-${{ matrix.config.architecture }}-${{ matrix.config.device }}.tar.gz

  release:
    name: Release Artifacts
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: xla-${{ needs.build.outputs.xla_commit_id }}
          files: "*.tar.gz/*.tar.gz"
