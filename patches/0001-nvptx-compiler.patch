--- a/third_party/gpus/cuda/hermetic/BUILD.tpl
+++ b/third_party/gpus/cuda/hermetic/BUILD.tpl
@@ -307,6 +307,7 @@ cc_library(
     # This is not yet fully supported, but we need the rule
     # to make bazel query happy.
     name = "nvptxcompiler",
+    actual = "@cuda_nvcc//:libnvptxcompiler",
 )
 
 alias(
 
--- a/workspace0.bzl
+++ b/workspace0.bzl
@@ -138,10 +138,10 @@ def workspace():
     # Details: https://github.com/google-ml-infra/rules_ml_toolchain
     http_archive(
         name = "rules_ml_toolchain",
-        sha256 = "d486aadba1b4415da16d744e4511c7a35d4d1604c61ed562d37519d5ed072a86",
-        strip_prefix = "rules_ml_toolchain-69a7b71c9424ddbcc27cb7814ecfd482510b1947",
+        sha256 = "fb78d09234528aef2be856820b69b76486829f65e4eb3c7ffaa5803b667fa441",
+        strip_prefix = "rules_ml_toolchain-f4ad89fa906be2c1374785a79335c8a7dcd49df7",
         urls = [
-            "https://github.com/google-ml-infra/rules_ml_toolchain/archive/69a7b71c9424ddbcc27cb7814ecfd482510b1947.tar.gz",
+            "https://github.com/zml/rules_ml_toolchain/archive/f4ad89fa906be2c1374785a79335c8a7dcd49df7.tar.gz",
         ],
     )
 
--- a/xla/stream_executor/cuda/BUILD
+++ b/xla/stream_executor/cuda/BUILD
@@ -124,7 +124,12 @@ cc_library(
             "@tsl//tsl/platform:errors",
             "@tsl//tsl/platform:status",
             "@tsl//tsl/platform:statusor",
-        ] + tf_additional_cuda_platform_deps(),
+        ] + tf_additional_cuda_platform_deps() + select({
+            ":libnvptxcompiler_support_enabled": [
+                "@local_config_cuda//cuda:nvptxcompiler",
+            ],
+            "//conditions:default": [],
+        }),
     alwayslink = True,  # Registers itself with the PlatformManager.
 )
 
