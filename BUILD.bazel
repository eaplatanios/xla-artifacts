load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@com_google_protobuf//bazel:proto_library.bzl", "proto_library")
load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@xla//xla/tsl:tsl.bzl", "tsl_copts")
load("//bazel:archive.bzl", "build_archive")

# ----------------------------------------------------
# Bazel
# ----------------------------------------------------

buildifier(
    name = "bzl-format-check",
    exclude_patterns = [
        "**/src/**",
        "**/bazel-*/**",
    ],
    lint_mode = "warn",
    mode = "diff",
)

buildifier(
    name = "bzl-format-fix",
    exclude_patterns = [
        "**/src/**",
        "**/bazel-*/**",
    ],
    lint_mode = "fix",
    mode = "fix",
)

platform(
    name = "x64_windows-clang-cl",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@bazel_tools//tools/cpp:clang-cl",
    ],
)

# ----------------------------------------------------
# XLA
# ----------------------------------------------------

XLA_DEPENDENCIES = [
    # "@jax//jaxlib/mosaic/gpu:mlir_capi",
    "@llvm-project//llvm:Support",
    "@llvm-project//mlir:CAPIAMDGPU",
    "@llvm-project//mlir:CAPIArith",
    "@llvm-project//mlir:CAPIAsync",
    "@llvm-project//mlir:CAPICF",
    "@llvm-project//mlir:CAPIConversion",
    "@llvm-project//mlir:CAPIDebug",
    "@llvm-project//mlir:CAPIEmitC",
    "@llvm-project//mlir:CAPIExecutionEngine",
    "@llvm-project//mlir:CAPIGPU",
    "@llvm-project//mlir:CAPIIndex",
    "@llvm-project//mlir:CAPIInterfaces",
    "@llvm-project//mlir:CAPIIR",
    "@llvm-project//mlir:CAPILinalg",
    "@llvm-project//mlir:CAPILLVM",
    "@llvm-project//mlir:CAPIMath",
    "@llvm-project//mlir:CAPIMemRef",
    "@llvm-project//mlir:CAPIMLProgram",
    "@llvm-project//mlir:CAPINVGPU",
    "@llvm-project//mlir:CAPINVVM",
    "@llvm-project//mlir:CAPIPDL",
    "@llvm-project//mlir:CAPIRegisterEverything",
    "@llvm-project//mlir:CAPIROCDL",
    "@llvm-project//mlir:CAPISCF",
    "@llvm-project//mlir:CAPISMT",
    "@llvm-project//mlir:CAPISparseTensor",
    "@llvm-project//mlir:CAPITarget",
    "@llvm-project//mlir:CAPITransformDialect",
    "@llvm-project//mlir:CAPITransformDialectTransforms",
    "@llvm-project//mlir:CAPITransforms",
    "@llvm-project//mlir:CAPIQuant",
    "@llvm-project//mlir:CAPIVector",
    "@llvm-project//mlir:FuncDialect",
    "@llvm-project//mlir:IR",
    "@llvm-project//mlir:Support",
    "@shardy//shardy/integrations/c:sdy_capi",
    "@stablehlo//:chlo_capi",
    "@stablehlo//:stablehlo_capi",
    "@stablehlo//:vhlo_capi",
    "@xla//xla/mlir_hlo:CAPI",
    "@xla//xla/service/spmd/shardy/integrations/c:xla_sdy_capi",
]

RIFT_PJRT_SYS_DEPENDENCIES = XLA_DEPENDENCIES + select({
    "@local_config_cuda//:is_cuda_enabled": [
        "@xla//xla/pjrt/c:pjrt_c_api_gpu",
        "@xla//xla/service:gpu_plugin",
        "@xla//xla/stream_executor:cuda_platform",
    ],
    "@local_config_rocm//rocm:using_hipcc": [
        "@xla//xla/pjrt/c:pjrt_c_api_gpu",
        "@xla//xla/service:gpu_plugin",
        "@xla//xla/stream_executor:rocm_platform",
    ],
    "//conditions:default": [
        "@xla//xla/pjrt/c:pjrt_c_api_cpu",
    ],
})

# The main `rift-pjrt-sys` library can be built to include support for CUDA or ROCm
# without requiring a separate plugin. If built with CPU-only support, then the resulting
# binaries will be smaller and will still be able to load PJRT plugins dynamically
# (e.g., for GPU support). Building it with GPU support is convenient if you want
# to have GPU support combined with a single statically-linked Rust binary.
cc_library(
    name = "rift-pjrt-sys-library",
    additional_linker_inputs = [
        ":rift_pjrt_sys_exported_symbols.txt",
        ":rift_pjrt_sys_version_script.lds",
    ],
    copts = tsl_copts(),
    linkopts = select({
        "@xla//xla/tsl:windows": [
            "/FORCE:MULTIPLE",
        ],
        "@xla//xla/tsl:macos": [
            "-Wl,-exported_symbols_list,$(location :rift_pjrt_sys_exported_symbols.txt)",
            "-Wl,-undefined,error",
        ],
        "//conditions:default": [
            "-Wl,--version-script,$(location :rift_pjrt_sys_version_script.lds)",
            "-Wl,--no-undefined",
        ],
    }),
    win_def_file = ":rift_pjrt_sys.def",
    deps = RIFT_PJRT_SYS_DEPENDENCIES,
    # linkstatic = True,
    alwayslink = True,
)

cc_static_library(
    name = "rift-pjrt-sys-static",
    deps = [":rift-pjrt-sys-library"],
)

cc_binary(
    name = "rift-pjrt-sys",
    linkopts = select({
        "@xla//xla/tsl:windows": [],
        "@xla//xla/tsl:macos": [
            # We set the `install_name`, such that the library is looked up in the `RPATH`
            # at runtime. Otherwise, the `install_name` would be an arbitrary path within
            # the Bazel workspace.
            "-Wl,-install_name,@rpath/librift-pjrt-sys.dylib",

            # We set `RPATH` to the same directory as `librift-pjrt-sys.dylib`, so that loading PJRT
            # plugins from within the same directory works out of the box.
            "-Wl,-rpath,@loader_path/",
        ],
        "//conditions:default": [
            "-Wl,-soname,librift-pjrt-sys.so",
            "-Wl,-rpath='$$ORIGIN'",
        ],
    }),
    linkshared = True,
    deps = [":rift-pjrt-sys-library"],
)

filegroup(
    name = "rift-pjrt-sys-windows-interface-library",
    srcs = [":rift-pjrt-sys"],
    output_group = "interface_library",
)

# filegroup(
#     name = "rift-pjrt-sys-td-files",
#     srcs = [
#         "@llvm-project//mlir:AffineOpsTdFiles",
#         "@llvm-project//mlir:ArithOpsTdFiles",
#         "@llvm-project//mlir:AsyncOpsTdFiles",
#         "@llvm-project//mlir:BufferizationOpsTdFiles",
#         "@llvm-project//mlir:BufferizationTransformOpsTdFiles",
#         "@llvm-project//mlir:ComplexOpsTdFiles",
#         "@llvm-project//mlir:ControlFlowOpsTdFiles",
#         "@llvm-project//mlir:FuncTransformOpsTdFiles",
#         "@llvm-project//mlir:GPUOpsTdFiles",
#         "@llvm-project//mlir:GPUTransformOpsTdFiles",
#         "@llvm-project//mlir:IndexOpsTdFiles",
#         "@llvm-project//mlir:LLVMOpsTdFiles",
#         "@llvm-project//mlir:LinalgDocTdFiles",
#         "@llvm-project//mlir:LinalgOpsTdFiles",
#         "@llvm-project//mlir:LinalgStructuredOpsTdFiles",
#         "@llvm-project//mlir:LinalgTransformOpsTdFiles",
#         "@llvm-project//mlir:MLProgramOpsTdFiles",
#         "@llvm-project//mlir:MathOpsTdFiles",
#         "@llvm-project//mlir:MemRefOpsTdFiles",
#         "@llvm-project//mlir:MemRefTransformOpsTdFiles",
#         "@llvm-project//mlir:NVGPUOpsTdFiles",
#         "@llvm-project//mlir:NVGPUTransformOpsTdFiles",
#         "@llvm-project//mlir:NVVMOpsTdFiles",
#         "@llvm-project//mlir:OpenAccOpsTdFiles",
#         "@llvm-project//mlir:OpenMPOpsTdFiles",
#         "@llvm-project//mlir:PDLInterpOpsTdFiles",
#         "@llvm-project//mlir:QuantizationOpsTdFiles",
#         "@llvm-project//mlir:ROCDLOpsTdFiles",
#         "@llvm-project//mlir:SCFTransformOpsTdFiles",
#         "@llvm-project//mlir:SPIRVOpsTdFiles",
#         "@llvm-project//mlir:ShapeOpsTdFiles",
#         "@llvm-project//mlir:TensorOpsTdFiles",
#         "@llvm-project//mlir:TensorTransformOpsTdFiles",
#         "@llvm-project//mlir:VCIXTdFiles",
#         "@llvm-project//mlir:VectorOpsTdFiles",
#         "@llvm-project//mlir:VectorTransformOpsTdFiles",
#         "@llvm-project//mlir:XeVMTdFiles",
#         "@shardy//shardy/dialect/sdy/ir:sdy_td_files",
#         "@stablehlo//:chlo_ops_td_files",
#         "@stablehlo//:stablehlo_ops_td_files",
#         "@stablehlo//:vhlo_ops_td_files",
#         "@xla//xla/mlir_hlo:hlo_ops_td_files",
#     ],
# )

proto_library(
    name = "rift-pjrt-sys-protos",
    deps = ["@xla//xla/pjrt/proto:compile_options_proto"],
)

build_archive(
    name = "rift-pjrt-sys-static-archive",
    rift_pjrt_sys_headers = ":rift-pjrt-sys",
    rift_pjrt_sys_library = ":rift-pjrt-sys-static",
    rift_pjrt_sys_protos = ":rift-pjrt-sys-protos",
    # rift_pjrt_sys_td_files = ":rift-pjrt-sys-td-files",
)

build_archive(
    name = "rift-pjrt-sys-archive",
    rift_pjrt_sys_headers = ":rift-pjrt-sys",
    rift_pjrt_sys_library = ":rift-pjrt-sys",
    rift_pjrt_sys_protos = ":rift-pjrt-sys-protos",
    # rift_pjrt_sys_td_files = ":rift-pjrt-sys-td-files",
    rift_pjrt_sys_windows_interface_library = ":rift-pjrt-sys-windows-interface-library",
)

cc_binary(
    name = "pjrt-gpu-plugin",
    additional_linker_inputs = [
        ":pjrt_plugin_exported_symbols.txt",
        ":pjrt_plugin_version_script.lds",
    ],
    copts = tsl_copts(),
    linkopts = select({
        "@xla//xla/tsl:windows": [
            "/FORCE:MULTIPLE",
        ],
        "@xla//xla/tsl:macos": [
            "-Wl,-exported_symbols_list,$(location :pjrt_plugin_exported_symbols.txt)",
            "-Wl,-undefined,error",
        ],
        "//conditions:default": [
            "-Wl,--version-script,$(location :pjrt_plugin_version_script.lds)",
            "-Wl,--no-undefined",
        ],
    }),
    win_def_file = ":pjrt_plugin.def",
    linkshared = True,
    deps = [
        "@xla//xla/pjrt/c:pjrt_c_api_gpu",
        "@xla//xla/service:gpu_plugin",
    ] + select({
        "@local_config_cuda//:is_cuda_enabled": [
            "@xla//xla/stream_executor:cuda_platform",
        ],
        "@local_config_rocm//rocm:using_hipcc": [
            "@xla//xla/stream_executor:rocm_platform",
        ],
        "//conditions:default": [],
    }),
    target_compatible_with = select({
        "@local_config_cuda//:is_cuda_enabled": [],
        "@local_config_rocm//rocm:using_hipcc": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
)
